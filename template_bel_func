#Plot und fit an beliebige Funktion
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import sympy as sym

#fit z.B an eine Exponentialfunktion oder ein polynom

def func(x, a,b,c,d):
    #return a*x**3 + b*x**2 +c*x + d  #fit an polynom
    return a*np.exp(-b*x)+c*x+d

#Daten die an die e-Fkt gefittet werden sollen

y, x = np.loadtxt('Daten.txt', delimiter = ',', unpack ='True') #hier evtl reihenfolge von x und y tauschen

#Messdaten Plotten

plt.plot(x,y, 'o', label='Messwerte')

#fit anlegen
popt, pcov = curve_fit(func, x, y)

#Ergebniss:
#popt[0] = a, popt[1] =b, popt[2] = c, popt[3] = d usw

#Ausgbabe fit Parameter

for i in range(len(popt)):
    print("fitparamter a,b,c,..=", popt[i])
    i+= i

#Ausgabe der Fehler auf die Fit-Parameter

for i in range(len(np.diag(pcov))) 
    print("fehler a,b,c,..=", np.sqrt(np.diag(pcov)))
    i+=i

#Plotten des Fits
plt.plot(x, func(x, *popt), label="Fitted Curve") #same as line above \/
plt.ylabel('x-achse', size='medium')
plt.xlabel('y-achse', size='medium')

#testen ob fit zutreffend ist
#plt.plot(x, popt[0]*np.exp(-popt[1]*x)+popt[2]*x+popt[3], label="Fitted Curve")

plt.legend(loc='upper left')
plt.show()
